scalar Date

# TODO: 1. Klauzule @include, @skip

# TODO: 4. Paginacja, (first, offset), (first, elementId), (first, coursor)
# TODO: 5. (root, arguments, context, info) - jako parametry każdego resolver'a
# TODO: 6. Jak testować API oparte na GraphQL?


# Rozdział 5
# TODO: 1. Możliwości schemy: https://grandstack.io/docs/graphql-schema-generation-augmentation.html
# TODO: 2. GraphQL bezpośrednio w bazie https://grandstack.io/docs/neo4j-graphql-database-plugin.html
# TODO: 3. Filtrowanie, zarówno po stronie Neo4j jak i MongoDB
# TODO: 4. @isAuthenticated, @hasRole, @hasScope - https://grandstack.io/docs/neo4j-graphql-js-middleware-authorization.html
# TODO: 5. Przykład użycia z autoryzacją,
#           https://graphql.org/graphql-js/authentication-and-express-middleware/
#           https://grandstack.io/docs/neo4j-graphql-js-middleware-authorization.html

type Query {
    simpleQuery: String
    exampleQueryOfType: SimpleQuery
    unionType: SearchResult

    Employee(employeeID: ID): Employee
    Employees: [Employee]

    Customer(customerID: ID): Customer
    Customers: [Customer]

    Order(orderID: ID): Order
    Orders: [Order]

    Supplier(supplierID: ID): Supplier
    Suppliers: [Supplier]

    Category(categoryID: ID): Category
    Categories: [Category]

    Product(productID: ID): Product
    Products: [Product]
}

union SearchResult = Employee | Customer | Supplier

type Mutation {
    doNothing(message: String): String
    doNothingButWithInputType(messageType: MessageType): String
}

type SimpleQuery {
    intField: Int
    floatField: Float
    stringField: String
    stringButWithoutFunction: String
    booleanField: Boolean
    IDField: ID
    enumType: EnumType
}

input MessageType {
    stringField: String
    booleanFlag: Boolean
}

enum EnumType {
    FIRST_TYPE
    SECOND_TYPE
    THIRD_TYPE
}

type Employee {
    employeeID: ID!
    firstName: String!
    lastName: String!
    birthDate: Date
    hireDate: Date
    title: String!
    titleOfCourtesy: String
    notes: String
    homePhone: String
    manager: Employee
    address: Address
}

type Customer {
    customerID: String!
    contactName: String!
    contactTitle: String
    companyName: String
    fax: String
    phone: String
    address: Address
    orders: [Order]
}

type Order {
    orderID: ID!
    freight: Float
    employee: Employee
    owner: Customer
    elements: [Product]
    shipName: String
    shippedDate(format: String): Date
    orderDate: Date
    requiredDate: Date
    address: Address
}

type Supplier {
    supplierID: ID!
    companyName: String!
    contactName: String!
    contactTitle: String!
    address: Address
    fax: String
    phone: String
    homePage: String
}

type Address {
    region: String
    country: String!
    city: String
    postalCode: String
    address: String
}

type Category {
    categoryID: ID!
    categoryName: String!
    description: String!
    products: [Product]
}

type Product {
    productID: ID!
    productName: String!
    unitsInStock: Int!
    unitPrice: Float!
    quantityPerUnit: String
    quantity: Float
    supplier: Supplier
    category: Category
}
