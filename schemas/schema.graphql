type Customer {
    customerID: ID!
    contactName: String!
    contactTitle: String
    companyName: String
    fax: String
    phone: String
    address(filter: String): Address @relation(name: "LIVES_IN", direction: "OUT")
}

type Address {
    region: String
    country: String!
    city: String
    postalCode: String
    address: String
}

type Employee {
    employeeID: ID!
    firstName: String!
    lastName: String!
    birthDate: String
    hireDate: String
    title: String!
    titleOfCourtesy: String
    manager: Employee @relation(name: "REPORTS_TO", direction: "OUT")
    notes: String
    photoPath: String
}

type Category {
    categoryID: ID!
    categoryName: String!
    description: String!
    picture: String
}

type Order {
    orderID: ID!
    shipCity: String
    freight: Float
    employee: Employee @relation(name: "SOLD", direction: "IN")
    owner: Customer @relation(name: "PURCHASED", direction: "IN")
    shipName: String
    shippedDate: Date
    orderDate: String
    requiredDate: String
    address: Address @relation(name: "SHIPPED_TO", direction: "OUT")
}

#type Business {
#    id: ID!
#    name: String
#    address: String
#    city: String
#    state: String
#    reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
#    categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
#}

#type Review {
#    id: ID!
#    stars: Int
#    text: String
#    date: Date
#    business: Business @relation(name: "REVIEWS", direction: "OUT")
#    user: User @relation(name: "WROTE", direction: "IN")
#}
#
#type Category {
#    name: ID!
#    businesses: [Business] @relation(name: "IN_CATEGORY", direction: "IN")
#}
#
#type Query {
#    usersBySubstring(substring: String): [User]
#    @cypher(
#        statement: "MATCH (u:User) WHERE u.name CONTAINS $substring RETURN u"
#    )
#}
